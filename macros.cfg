## conditional home
[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}
  
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
gcode:
    #G28 # or use a conditional or safe homing
    _CG28 # my if then sensorless homing
    BASE_QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1.000
    BASE_QUAD_GANTRY_LEVEL horizontal_move_z=3
    G28 Z
    
[gcode_macro G32]
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------


######################### PRINT START / END #########################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in other macros

variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
#variable_tool_name: "'revo'"
#variable_filament: 0 

gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set FILAMENT_TYPE = params.FILAMENT|default('PLA')|string %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set tool_name = params.NOZZLE|default('revo')|string %}   

   {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
   {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    #M109 S150    #TAP 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}   
   # SET_GCODE_VARIABLE MACRO=TOOLTEST    VARIABLE=tool_name VALUE={NOZZLE}  
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament VALUE={FILAMENT_TYPE}   
    

    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0                                       ; cancel exhaust off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=NVR_OFF DURATION=0                                           ; cancel nvr timer (if there is one)

   #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1                    ; kamp setting
   #SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1                              ; kamp setting

  # SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
  # RESETSPEEDS                                                                          ; reset speed, accel etc to configured values
  # RESETRGB                                                                             ; reset LCD RGB
    M104 S140                                                                            ; set hotend to no-ooze temp
    M140 S{bed}                                                                          ; set bed to target temp
    STATUS_HOMING
    G28                                                                                  ; home
    G90                                                                                  ; absolute positioning
    {% if printer["temperature_sensor chamber"].temperature < chamber %}                 ; - if chamber is not at temp yet:
    M117 Heatsoak started
        STATUS_HEATING
        HEATSOAK T={bed} MOVE=1                                                          ; heatsoak macro + park in center
        M190 S{bed}                                                                      ; wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}           ; wait for chamber final temp
    {% else %}                                                                           ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (bed-2) %}                                ; -- but bed is not fully heated (within 2C):
            STATUS_HEATING
            HEATSOAK T={bed} MOVE=1                                                      ; heatsoak and park
            M190 S{bed}                                                                  ; wait for bed final temp
        {% else %}                                                                       ; -- and bed is already heated:
            STATUS_HEATING
            HEATSOAK T={bed} MOVE=0                                                      ; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 
    M106 S0                                                                              ; turn off part cooling fan (from heatsoak)
    M117 Heatsoak finished
    BED_MESH_CLEAR                                                                       ; clear bed mesh
    STATUS_CLEANING
    CLEAN_NOZZLE
    #ATTACH_PROBE_LOCK                                                                   ; attach klicky + lock 
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL                                                                    ; quad gantry level
    G28 Z                                                                                ; home z
    G90                                                                                  ; absolute positioning
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500  ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    STATUS_MESHING
    BED_MESH_CALIBRATE PROFILE=default ADAPTIVE=1                                        ; you can give the profile any name you want
    #BED_MESH_CALIBRATE                                                                  ; mesh
    G28 Z                                                                                ; home z again
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    #DOCK_PROBE_UNLOCK                                                                   ; stow probe, unlock
    {% if tool_name =="revo" %}                                                          ; check if v6 if true dont scrub nozzle
      G0 X140 Z10 Y{printer.toolhead.axis_maximum.y} F19500                              ; move to right of nozzle brush
      M109 S{hotend}                                                                     ; set & wait for hotend final temp
      STATUS_CLEANING
      CLEAN_NOZZLE                                                                       ; clean nozzle while hot
	{% endif %}
    TEMP_ADJUST_PA                                                                       ; change PA based on bed temp
    {% if tool_name =="revo" %}                                                          ; check if revo if true change switch
      {action_respond_info("Tool_Name is: %s" % (tool_name))}
      {action_respond_info("Filament is: %s" % (FILAMENT_TYPE))}
     # {% endif %}
      #STATUS_CALIBRATING_Z
      #CALIBRATE_Z                                                                       ; calibrate z offset with hot nozzle
   {% else %}    
      {action_respond_info("Tool_Name is: %s" % (tool_name))}
      {action_respond_info("Filament is: %s" % (FILAMENT_TYPE))}
      #STATUS_CALIBRATING_Z
      #CALIBRATE_Z  
      #SET_GCODE_OFFSET Z_ADJUST=0.017 MOVE=1                                            ; calibrate z offset with hot nozzle Z_ADJUST=0.017
   {% endif %} 
   {% if FILAMENT_TYPE == "PCCF" %}
      SET_GCODE_OFFSET Z_ADJUST=0.005 MOVE=1 
   {% endif %} 
    {% if FILAMENT_TYPE in ("ABS", "ABS+", "ASA", "PC", "PCCF") %}
      NEVERMORE FAN_SPEED=0.7
	{% endif %}
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.1                                                ; set chamber fan to 10%
    STATUS_BUSY
    #G92 E0                                                                                ; reset Extruder            -reg setting
    G1 X{x_wait} Y{y_wait} Z15 F9000                                                       ; Goes to center of the bed
    #G1 X5 Y20 Z0.4 F19500.0                                                               ; move to start position    -reg setting
    G0 X{x_wait - 50} Y4 F10000                                                            ; Moves to starting point
  {% if tool_name =="v6" %}
    M109 S{hotend}
  {% endif %} 
    #G1 X5 Y200.0 Z0.4 F1500.0 E15                                                         ; draw the first line      -reg setting
    #G92 E0                                                                                ; reset Extruder           -reg setting
    #G1 Z2.0 F3000                                                                         ; move Z Axis up           -reg setting
    #PURGE_LINE                                                                            ; purge line again front   -reg setting
    LINE_PURGE                                                                             ; kamp setting
    #VORON_PURGE                                                                            ; kamp setting
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                    ; enable filament sensor
    #STATUS_MAGITE



[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    #{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set z_safe = th.position.z + 20 * (1 if th.axis_maximum.z - th.position.z > 20 else -1) %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    M117 DISABLING the Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=
    TURN_OFF_HEATERS
    G90                                                                                ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                            ; move nozzle to remove stringing
                                                                                       ; clean nozzle while hot
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600                          ; park nozzle at rear
    M109 S120
    STATUS_CLEANING
    CLEAN_NOZZLE 
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600                          ; park nozzle at rear
    M107                                                                               ; turn off fan
    BED_MESH_CLEAR
    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120                                   ; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                   ; turn everything off in 10 min
    UPDATE_DELAYED_GCODE ID=NVR_OFF DURATION=1800                                      ; turn everything off in 30 min
    #STATUS_MAGENTA
    #{action_respond_info("Finished Printing...")}
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[delayed_gcode EXHAUST_OFF]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[delayed_gcode NVR_OFF]
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

################# PAUSE/RESUME/CANCEL #########################
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}             ;  set timeout back to configured value
	CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    M117 DISABLING the Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                     ; Put your filament sensor's name after SENSOR=

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                  ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

# Return Z hop back down, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                              ; enable filament sensor
        #RESETRGB                                                                                                         ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}




######################### COLOR CHG #########################

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################### NEVERMORE #########################

[gcode_macro NEVERMORE]
gcode:
    {% set fanSpeed = params.FAN_SPEED|float %}
    SET_FAN_SPEED FAN=Nevermore SPEED={fanSpeed}

[delayed_gcode NEVERMORE_COOLDOWN]
gcode:
  SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro NEVERMORE_COOLDOWN]
gcode:
  UPDATE_DELAYED_GCODE ID=NEVERMORE_COOLDOWN DURATION=3600

[menu main control nevermoreonoff]
type: command
name: Nevermore {'ON' if printer['fan_generic Nevermore'].speed > 0 else 'OFF'}
enable: {'fan_generic Nevermore' in printer}
gcode:
    TOGGLE_NEVERMORE

[menu main control filterspeed]
type: input
enable: {'fan_generic Nevermore' in printer}
name: Filter %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic Nevermore"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED={menu.input}

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro TOGGLE_NEVERMORE]
gcode:
    {% if printer['fan_generic Nevermore'].speed > 0 %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0
    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED=1
    {% endif %}


######################### FILAMENT #########################

#[gcode_macro UNLOAD_FILAMENT]
#gcode:
#    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
#    M83                                   ; set extruder to relative
#    G1 E10 F600                           ; extrude a little to soften tip 
#    G1 E-120 F1800                        ; retract filament completely
#    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

#[gcode_macro LOAD_FILAMENT]
#gcode:
#    SAVE_GCODE_STATE NAME=LOADFILAMENT
#    M83 ; set extruder to relative
#    G1 E90 F600
#    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

[gcode_macro PURGE_LINE]
description: Extrude a purge line at 0,0,.35. Perams: NONE
gcode:
    {action_respond_info("Running Purge line...")}
    SAVE_GCODE_STATE NAME=PURGE_LINE
    G90                                     ; absolute positioning
    M83                                     ; relative extruder positioning
    G92 E0                                  ; reset Extruder
    G1 X0 Y0 F2000                          ; move to purge strip start position
    G1 Z0.35 F2000                          ; drop to 0.35 print height
    G1 E6.0 F140                            ; Spew a small puddle - cleans gunk
    G1 X60 E6.0 F800.0                      ; intro line 1
    G1 X120 E10.5 F1000.0                   ; intro line 2 - a little fatter than line 1
    G1 E-.75 Z2                             ; Retract some after purge line
    G92 E0.0                                ; reset extruder distance position
    G1 Z4.0 F2000                           ; move Z Axis up
    {action_respond_info("Finished Purge line...")}
    RESTORE_GCODE_STATE NAME=PURGE_LINE


######################### TEMP OFFSET #########################
[gcode_macro TEMP_ADJUST_OFFSET]
gcode:
    #ABS
    {% if printer.heater_bed.target >= 100 %}
    {% endif %}
    #PETG
    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
        SET_GCODE_OFFSET Z=0 MOVE=1
        SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1
    {% endif %}
    #PLA
    {% if printer.heater_bed.target <= 65 %}
        SET_GCODE_OFFSET Z=0 MOVE=1
        SET_GCODE_OFFSET Z_ADJUST=0.1 MOVE=1
    {% endif %}

                                                   

######################### TOOLHEAD OFFSET #########################
[gcode_macro TOOLHEAD_SWITCH_OFFSET]
gcode:
  
  {% if printer["gcode_macro PRINT_START"].tool_name !="revo" %}                                      ; check if revo if true change switch
      {action_respond_info("Tool_Name is: %s" % (printer["gcode_macro PRINT_START"].tool_name))}
      #CALIBRATE_Z                                                                                     ; calibrate z offset with hot nozzle
      SET_GCODE_OFFSET Z_ADJUST=0.010 MOVE=1
  {% else %}    
      {action_respond_info("Tool_Name is: %s" % (printer["gcode_macro PRINT_START"].tool_name))}
      #CALIBRATE_Z                                                                                      ; calibrate z offset with hot nozzle
  {% endif %}   


######################### PRESSURE ADVANCE #########################
[gcode_macro TEMP_ADJUST_PA]
gcode:
    #ABS
    {% if printer.heater_bed.target >= 95 %}
          SET_PRESSURE_ADVANCE ADVANCE=0.035  #was 0.04, 0.05585
    {% endif %}
    #PETG
    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 95 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.0785
    {% endif %}
    #PLA
    {% if printer.heater_bed.target <= 65 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.04
    {% endif %}



######################### BED MESH #########################
[gcode_macro BED_MESH_PROC]
gcode:
    G32
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={printer.heater_bed.target}C
    SAVE_CONFIG


[gcode_macro BED_MESH_LOAD]
gcode:
    BED_MESH_PROFILE LOAD={printer.heater_bed.target}C


[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1


######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

[gcode_macro ZCG28]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}


######################### PARKING #########################
[gcode_macro PARK_FRONT]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                                   ; absolute positioning
    G0 X175 Y0 Z175 F18000
    RESTORE_GCODE_STATE NAME=PARKFRONT


[gcode_macro PARK_REAR]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                                   ; absolute positioning
    G0 X0 Y350 Z300 F18000
    RESTORE_GCODE_STATE NAME=PARKREAR


[gcode_macro PARK_CENTER]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                                   ; absolute positioning
    G0 X175 Y175 Z175 F18000
    RESTORE_GCODE_STATE NAME=PARKCENTER


[gcode_macro PARK_BED]
gcode:
    CG28                                  ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                   ; absolute positioning
    G0 X175 Y175 Z1 F18000
    RESTORE_GCODE_STATE NAME=PARKBED


######################### MISC #########################

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                      ; turn steppers off
    TURN_OFF_HEATERS                         ; turn bed / hotend off
    M107                                     ; turn print cooling fan off
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0    ; turn exhaust fan off
    SET_FAN_SPEED FAN=BedFans SPEED=0       ; bed fan off
    #SET_PIN PIN=caselight VALUE=0           ; turn light off
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro GO_CENTER]
gcode:
		
	{% if printer.homed_axes != 'XYZ' %}
		G28							#Home All Axes
	{% endif %}

	G92 E0 							# Reset Extruder
	G1 X170 Y170 Z170 F3000 		# Move XYZ Axis to travel height


[gcode_macro CNG_PLATE]
gcode:
		
	{% if printer.homed_axes != 'XYZ' %}
		G28							#Home All Axes
	{% endif %}

	G92 E0 							# Reset Extruder
	G1 X190 Y260 Z300 F3000 		# Move XYZ Axis to travel height


[gcode_macro SWITCH_OFFSET]
gcode:
		
  G28							; Home All Axes
  #ATTACH_PROBE_LOCK             ; attach klicky + lock
  #M401                         ; attach euclid + lock
  QUAD_GANTRY_LEVEL             ; quad gantry level
  G28 Z                         ; home z
  G90                           ; absolute positioning
  G0 Z20                        ; hop up to prevent knocking probe off after homing Z
  #DOCK_PROBE_UNLOCK  
  #M402                         ; dock probe + unlock
 #CALIBRATE_Z
  GO_CENTER
  G90
  M117 Now use G0 Z5 to G0 Z0.1 to finish
  #{action_respond_info("Now use G0 Z5 to G0 Z0.1 to finish")}



# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
#[gcode_macro M109]
#rename_existing: M99109
#gcode:
    #Parameters
 #   {% set s = params.S|float %}
    
#	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
 #   {% if s != 0 %}
  #      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
   #
#{% endif %}


[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}

	SAVE_GCODE_STATE NAME=HEATSOAK
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0           ; turn off exhaust fan
    #SET_PIN PIN=caselight VALUE=1                  ; turn on case light
    M140 S{t}                                       ; heat bed
    {% if t >= 100 %}
        M104 S150                                   ; set hotend to no-ooze temp
        M106 S205                                   ; turn on part fan (80%)
    {% else %}
        M106 S0                                     ; turn part fan off
    {% endif %}
    {% if move == 1 %}
        CG28
		G90
		G0 Z{printer.toolhead.axis_maximum.z/2} F19500    
		G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500    
    {% endif %}
	RESTORE_GCODE_STATE NAME=HEATSOAK


[gcode_macro BED_MESH_HOT]
gcode:
   {% if printer["temperature_sensor chamber"].temperature < 50 %}                      ; - if chamber is not at temp yet:
    M117 Heatsoak started
        STATUS_HEATING
        HEATSOAK T=110 MOVE=1                                                           ; heatsoak macro + park in center
        M190 S100                                                                       ; wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={50}               ; wait for chamber final temp
    {% else %}                                                                          ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < 98 %}                                    ; -- but bed is not fully heated (within 2C):
            STATUS_HEATING
            HEATSOAK T=110 MOVE=1                                                       ; heatsoak and park
            M190 S100                                                                   ; wait for bed final temp
        {% else %}                                                                      ; -- and bed is already heated:
            STATUS_HEATING
            HEATSOAK T=110 MOVE=0                                                       ; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 
    
    M104 S150                                                                           ; set hotend to no-ooze temp
    M140 S100                                                                           ; set bed to target temp
    BED_MESH_CLEAR
    G28 
    QUAD_GANTRY_LEVEL 
    G28 Z 
    BED_MESH_CALIBRATE 



######################### TAP #########################
[gcode_macro PROBE_Z_CONFIG]
gcode:
   {% if printer["temperature_sensor chamber"].temperature < 50 %}                      ; - if chamber is not at temp yet:
    M117 Heatsoak started
        STATUS_HEATING
        HEATSOAK T=100 MOVE=1                                                           ; heatsoak macro + park in center
        M190 S100                                                                       ; wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={50}               ; wait for chamber final temp
    {% else %}                                                                          ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < 98 %}                                    ; -- but bed is not fully heated (within 2C):
            STATUS_HEATING
            HEATSOAK T=100 MOVE=1                                                       ; heatsoak and park
            M190 S100                                                                   ; wait for bed final temp
        {% else %}                                                                      ; -- and bed is already heated:
            STATUS_HEATING
            HEATSOAK T=100 MOVE=0                                                       ; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 
    
    M104 S150                                                                           ; set hotend to no-ooze temp
    M140 S100                                                                           ; set bed to target temp
    BED_MESH_CLEAR
    G28 
    QUAD_GANTRY_LEVEL 
    G28 Z 
    PROBE_CALIBRATE 


[gcode_macro PROBE_Z_CONFIG_COLD]
gcode:
    BED_MESH_CLEAR
    G28 
    QUAD_GANTRY_LEVEL 
    G28 Z 
    PROBE_CALIBRATE 



######################### PRINT START / END MULTI COLOR #########################

[gcode_macro PRINT_START_MULTI_COLOR]
# For setting the parameters as persistent variables so they can be referenced in other macros

variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
#variable_tool_name: "'revo'"
#variable_filament: 0 

gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set FILAMENT_TYPE = params.FILAMENT|default('PLA')|string %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set tool_name = params.NOZZLE|default('revo')|string %}   

   {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
   {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    M109 S150    #TAP 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}   
   # SET_GCODE_VARIABLE MACRO=TOOLTEST    VARIABLE=tool_name VALUE={NOZZLE}  
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament VALUE={FILAMENT_TYPE}   
    

    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0                                       ; cancel exhaust off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=NVR_OFF DURATION=0                                           ; cancel nvr timer (if there is one)

  # SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1                   ; kamp setting
  # SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1                             ; kamp setting

  # SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
  # RESETSPEEDS                                                                          ; reset speed, accel etc to configured values
  # RESETRGB                                                                             ; reset LCD RGB
    M104 S140                                                                            ; set hotend to no-ooze temp
    M140 S{bed}                                                                          ; set bed to target temp
    STATUS_HOMING
    G28                                                                                  ; home
    G90                                                                                  ; absolute positioning
    STATUS_CLEANING
    CLEAN_NOZZLE
    #ATTACH_PROBE_LOCK                                                                   ; attach klicky + lock 
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL                                                                    ; quad gantry level
    G28 Z                                                                                ; home z
    G90                                                                                  ; absolute positioning
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500  ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    G28 Z                                                                                ; home z again
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    #DOCK_PROBE_UNLOCK                                                                   ; stow probe, unlock
    TEMP_ADJUST_PA                                                                       ; change PA based on bed temp
    {% if tool_name =="revo" %}                                                          ; check if revo if true change switch
      {action_respond_info("Tool_Name is: %s" % (tool_name))}
      {action_respond_info("Filament is: %s" % (FILAMENT_TYPE))}
     # {% endif %}
      #STATUS_CALIBRATING_Z
      #CALIBRATE_Z                                                                        ; calibrate z offset with hot nozzle
   {% else %}    
      {action_respond_info("Tool_Name is: %s" % (tool_name))}
      {action_respond_info("Filament is: %s" % (FILAMENT_TYPE))}
      #STATUS_CALIBRATING_Z
      #CALIBRATE_Z  
      #SET_GCODE_OFFSET Z_ADJUST=0.017 MOVE=1                                              ; calibrate z offset with hot nozzle Z_ADJUST=0.017
   {% endif %} 
   {% if FILAMENT_TYPE == "PCCF" %}
      SET_GCODE_OFFSET Z_ADJUST=0.005 MOVE=1 
   {% endif %} 
    {% if FILAMENT_TYPE in ("ABS", "ABS+", "ASA", "PC", "PCCF") %}
      NEVERMORE FAN_SPEED=0.7
	{% endif %}
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.1                                               ; set chamber fan to 10%
    STATUS_BUSY
    G92 E0                                                                                ; reset Extruder           -reg setting
    G1 X{x_wait} Y{y_wait} Z15 F9000                                                      ; Goes to center of the bed
    G1 X5 Y20 Z0.4 F19500.0                                                               ; move to start position  -reg setting
  {% if tool_name =="v6" %}
    M109 S{hotend}
  {% endif %} 
    M109 S{hotend} 
    G1 X5 Y200.0 Z0.4 F1500.0 E15                                                         ; draw the first line     -reg setting
    G92 E0                                                                                ; reset Extruder          -reg setting
    G1 Z2.0 F3000                                                                         ; move Z Axis up          -reg setting
    PURGE_LINE                                                                            ; purge line again front  -reg setting
    #LINE_PURGE                                                                           ; kamp setting
    #VORON_PURGE                                                                          ; kamp setting
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                   ; enable filament sensor
    #STATUS_MAGITE


[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE


[gcode_macro Carto_QGL] # safer and faster QGL for Cartographer
gcode:
    G28 # or use a conditional or safe homing
    QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL horizontal_move_z=3
    G28 Z

[gcode_macro CALIBRATE_BACKLASH]
description: Calibrate backlash at each corner
gcode:
    {% set z_height = 20 %}
    {% set x_max = printer.configfile.config['stepper_x']['position_max']|float %}
    {% set y_max = printer.configfile.config['stepper_y']['position_max']|float %}
    {% set x_min = 20 %}                # change the value if needed
    {% set y_min = 20 %}                # change the value if needed
    {% set x_safe_max = x_max - 20 %}   # change the value if needed
    {% set y_safe_max = y_max - 50 %}   # change the value if needed
    
    {% if printer.toolhead.homed_axes != "xyz" %}
    # Home the printer if not already homed
    G28
    {% endif %}

    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            # Perform Quad Gantry Level if needed
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}

    # Move to the front left corner
    G1 X{x_min} Y{y_min} Z{z_height} F15000
    CARTOGRAPHER_ESTIMATE_BACKLASH

    # Move to the front right corner
    G1 X{x_safe_max} Y{y_min} Z{z_height} F15000
    CARTOGRAPHER_ESTIMATE_BACKLASH

    # Move to the back right corner
    G1 X{x_safe_max} Y{y_safe_max} Z{z_height} F15000
    CARTOGRAPHER_ESTIMATE_BACKLASH

    # Move to the back left corner
    G1 X{x_min} Y{y_safe_max} Z{z_height} F15000
    CARTOGRAPHER_ESTIMATE_BACKLASH

    # Return to the center of the bed
    G1 X{x_max / 2} Y{y_max / 2} Z{z_height} F15000
	
	
	
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}#    

[gcode_macro PRINT_END_MULTI_COLOR]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    #{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set z_safe = th.position.z + 20 * (1 if th.axis_maximum.z - th.position.z > 20 else -1) %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END_MULTI_COLOR
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    M117 DISABLING the Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=
    #TURN_OFF_HEATERS
    G90                                                                                ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                            ; move nozzle to remove stringing                                                         
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500 ; park toolhead at front center
    #M109 S120
    #STATUS_CLEANING
    #CLEAN_NOZZLE 
    #UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                   ; turn everything off in 10 min
    #UPDATE_DELAYED_GCODE ID=NVR_OFF DURATION=1800                                      ; turn everything off in 30 min
    #STATUS_MAGENTA
    #{action_respond_info("Finished Printing...")}
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END_MULTI_COLOR



################################################
###### CARTOGRAPHER TEMP CALIBRATION      ######
################################################

[gcode_macro DATA_SAMPLE]
gcode:
  {% set bed_temp = params.BED_TEMP|default(90)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set min_temp = params.MIN_TEMP|default(40)|int %}
  {% set max_temp = params.MAX_TEMP|default(70)|int %}
  G90
  M106 S255
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={min_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"

  
######################### TEMP #########################
[gcode_macro TEMP_CLEAN_NOZZLE]
gcode:
    G0 X140 Z10 Y{printer.toolhead.axis_maximum.y} F19500                               ; move to right of nozzle brush
    CLEAN_NOZZLE


######################### auto config to github ##########################
[gcode_shell_command backup_cfg]
command: sh /home/pi/printer_data/config/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg